#!/usr/bin/env Rscript
# vi: ft=R fdm=marker

library(getopt)
suppressPackageStartupMessages(library(Risa))

# Constants {{{1
################################################################

ARGS <- commandArgs(trailingOnly = F)
SCRIPT.PATH <- sub("--file=", "", ARGS[grep("--file=", ARGS)])
PROG.NAME <- sub('^.*/([^/]+)$', '\\1', commandArgs()[4], perl = TRUE)

# Print help {{{1
################################################################

print.help <- function(spec) {
	cat(getopt(spec, usage = TRUE, command = PROG.NAME))
	q(status = 0)
}

# Arg error {{{1
################################################################

arg.error <- function(msg) {
	stop(paste(msg, "Use -h option to get help."))
}

# Read args {{{1
################################################################

read.args <- function() {

	# options
	spec <- c(
		'help',             'h',            0,  'logical',      'Print this help.',
		'input',            'i',            1,  'character',    'Input directory containing the ISA-Tab files.',
		'study-name',       'n',            1,  'character',    'Name of the study to extract. If unset, the first study found will be used.',
		'assay-filename',   'f',            1,  'character',    'Filename of the assay to extract. If unset, the first assay of the chosen study will be used.',
		'sample-output',    's',            1,  'character',    'Output file for sample metadata.',
		'variable-output',  'v',            1,  'character',    'Output file for variable metadata.',
		'matrix-output',    'm',            1,  'character',    'Output file for sample x variable matrix.',
		'samp-na-filering', 'S',            1,  'character',    'Filter out NA values in the specified sample metadata columns. The value is comma separated list of column names.',
		'var-na-filering',  'V',            1,  'character',    'Filter out NA values in the specified variable metadata columns. The value is comma separated list of column names.'
		)
	opt <- getopt(matrix(spec, byrow = TRUE, ncol = 5))

	# Help
	if ( ! is.null(opt$help))
		print.help(matrix(spec, byrow = TRUE, ncol = 5))

	# Parse values
	if ( ! is.null(opt[['samp-na-filering']]))
		opt[['samp-na-filering']] <- strsplit(opt[['samp-na-filering']], ',')
	if ( ! is.null(opt[['var-na-filering']]))
		opt[['var-na-filering']] <- strsplit(opt[['var-na-filering']], ',')

	# Check values
	! is.null(opt$input) || arg.error('You must set an input directory through -i option.')
	file.exists(opt$input) || arg.error(paste("Directory \"", opt$input, "\" doesn't exist.", sep = ''))

	# Set default path for unset outputs
	if (is.null(opt[['sample-output']])) opt[['sample-output']] <- paste(opt$input, 'sample-metadata.tsv', sep = '-')
	if (is.null(opt[['variable-output']])) opt[['variable-output']] <- paste(opt$input, 'variable-metadata.tsv', sep = '-')
	if (is.null(opt[['matrix-output']])) opt[['matrix-output']] <- paste(opt$input, 'sample-variable-matrix.tsv', sep = '-')

	return(opt)
}

# MAIN {{{1
################################################################

options(error = function() { traceback(2) ; quit(status = 1) }, warn = 2 )

# Read command line arguments
opt <- read.args()

# Read ISA-Tab files
# Suppress message: "No 'Factor Value' column defined in study file s_sacurine.txt. Factors slot will be an empty list for that study.
isa <- suppressMessages(Risa::readISAtab(opt$input))

# Get w4m format
sample.metadata <- NULL
variable.metadata <- NULL
sample.variable.matrix <- NULL

# Get study name
if ('study-name' %in% names(opt)) {
	if ( ! opt[['study-name']] %in% isa@study.identifiers)
		stop(paste("Cannot find study \"", opt[['study-name']], "\"."))
	study.name <- opt[['study-name']]
} else { # Take the first study
	message('No study name set, choose first study.')
	study.name <- isa@study.identifiers[[1]]
}
if (length(study.name) != 1)
	stop("No study found.")
message(paste('Study \"', study.name, '\" has been selected.', sep = ''))

# Get study data frame
study.df <- isa@study.files[[study.name]]

# Get assay
study.assays <- isa@assay.files.per.study[[study.name]]
if (length(study.assays) == 0)
	stop(paste("No assay in study ", study.name, ".", sep = ''))
if ('assay-filename' %in% names(opt)) {
	study.assay.index <- which(opt[['assay-filename']] == isa@assay.filenames)
	if (length(study.assay.index) == 0)
		stop(paste("Found no assay file \"", opt[['assay-filename']], "\" in study \"", study.name, "\".", sep = ''))
	if (length(study.assay.index) > 1)
		stop(paste("Found more than one assay file named \"", opt[['assay-filename']], "\" in study \"", study.name, "\".", sep = ''))
} else
	study.assay.index <- 1
study.assay.df <- study.assays[[study.assay.index]]
study.assay.filename <- isa@assay.filenames[[study.assay.index]]
message(paste("Assay file nÂ°", study.assay.index, " \"", study.assay.filename, "\" has been selected.", sep = ''))

# Create sample metadata by merging assay and study metadata
colnames(study.df) <- make.names(colnames(study.df), uniq = TRUE)
colnames(study.assay.df) <- make.names(colnames(study.assay.df), uniq = TRUE)
sample.metadata <- merge(study.assay.df, study.df, by = "Sample.Name", sort = FALSE)

# Get data files
m_file <- study.assay.df[["Metabolite.Assignment.File"]]
m_file <- m_file[ ! duplicated(m_file)]
if (length(m_file) != 1)
	stop(paste("Zero, or More than one metabolite assignement file found in assay \"", study.assay.filename, "\": ", paste(m_file, collapse = ", "), ".", sep = ''))
message(paste("Data file \"", m_file, "\" has been selected.", sep = ''))
m.df <- read.table(file = file.path(opt$input, m_file), sep = "\t", header = TRUE, check.names = FALSE)

# Get sample names for matching with m.df columns
sample.names <- NULL
sample.names.field <- NULL
for (sample.field in colnames(sample.metadata)) {
	if (all(sample.metadata[[sample.field]] %in% colnames(m.df)) && all(! duplicated(sample.metadata[[sample.field]]))) {
		sample.names.field <- sample.field
		break
	}
}
if (is.null(sample.names.field))
	stop(paste("Impossible to find a column for sample names. Either such a column does not exist, or it contains duplicates.", sep = ''))
message(paste("Column \"", sample.names.field, "\" has been selected for sample names to match with column names of data file \"", m_file, "\".", sep = ''))
sample.names <- sample.metadata[[sample.names.field]]

# Extract variable metadata
variable.metadata <- m.df[ ! colnames(m.df) %in% sample.names]

# Extract matrix
if (any( ! sample.names %in% colnames(m.df)))
	stop(paste("Cannot find sample names in column names of \"", m_file, "\".", sep = ''))
sample.variable.matrix <- m.df[sample.names]

# Create variable names
variable.names <- character(nrow(m.df))
for (f in c('mass_to_charge', 'retention_time'))
	if (f %in% colnames(m.df)) {
		col.vals <- as.character(m.df[[f]])
		col.vals <- ifelse(is.na(col.vals), '', col.vals)
		variable.names <- paste(variable.names, ifelse(nchar(variable.names) > 0 & nchar(col.vals) > 0, '_', ''), col.vals, sep = '')
	}
variable.names <- make.names(variable.names, uniq = TRUE)

# Add variable names as columns
variable.metadata <- cbind(data.frame(variable.name = variable.names), variable.metadata)
sample.variable.matrix <- cbind(data.frame(variable.name = variable.names), sample.variable.matrix)

# Rename samples
sample.names <- make.names(sample.names, uniq = TRUE)
colnames(sample.variable.matrix) <- c('variable.name', sample.names)
sample.metadata <- cbind(data.frame(sample.name = sample.names), sample.metadata)

# Make sure metadata columns have unique names
colnames(sample.metadata) <- make.names(colnames(sample.metadata), uniq = TRUE)
colnames(variable.metadata) <- make.names(colnames(variable.metadata), uniq = TRUE)

# Filter out NA values
if ( ! is.null(opt[['samp-na-filering']])) {
	opt[['samp-na-filering']] <- make.names(opt[['samp-na-filering']])
	cols.to.filter <- colnames(sample.metadata) %in% opt[['samp-na-filering']]
	good.rows <- complete.cases(sample.metadata[, cols.to.filter, drop = FALSE])
	sample.variable.matrix <- sample.variable.matrix[, c(TRUE, good.rows), drop = FALSE]
	sample.metadata <- sample.metadata[good.rows, , drop = FALSE]
}
if ( ! is.null(opt[['var-na-filering']])) {
	opt[['var-na-filering']] <- make.names(opt[['var-na-filering']])
	cols.to.filter <- colnames(variable.metadata) %in% opt[['var-na-filering']]
	good.rows <- complete.cases(variable.metadata[, cols.to.filter, drop = FALSE])
	sample.variable.matrix <- sample.variable.matrix[good.rows, , drop = FALSE]
	variable.metadata <- variable.metadata[good.rows, , drop = FALSE]
}

# Write output
write.table(sample.metadata, file = opt[['sample-output']], sep = "\t", row.names = FALSE)
write.table(variable.metadata, file = opt[['variable-output']], sep = "\t", row.names = FALSE)
write.table(sample.variable.matrix, file = opt[['matrix-output']], sep = "\t", row.names = FALSE)
