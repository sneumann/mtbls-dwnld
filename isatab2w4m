#!/usr/bin/env Rscript
# vi: ft=R fdm=marker

library(getopt)
suppressPackageStartupMessages(library(Risa))

# Constants {{{1
################################################################

ARGS <- commandArgs(trailingOnly = F)
SCRIPT.PATH <- sub("--file=", "", ARGS[grep("--file=", ARGS)])
PROG.NAME <- sub('^.*/([^/]+)$', '\\1', commandArgs()[4], perl = TRUE)

# Print help {{{1
################################################################

print.help <- function(spec) {
	cat(getopt(spec, usage = TRUE, command = PROG.NAME))
	q(status = 0)
}

# Arg error {{{1
################################################################

arg.error <- function(msg) {
	stop(paste(msg, "Use -h option to get help."))
}

# Read args {{{1
################################################################

read.args <- function() {

	# options
	spec <- c(
		'help',             'h',            0,  'logical',      'Print this help.',
		'input',            'i',            1,  'character',    'Input directory containing the ISA-Tab files.',
		'sample-output',    's',            1,  'character',    'Output file for sample metadata.',
		'variable-output',  'v',            1,  'character',    'Output file for variable metadata.',
		'matrix-output',    'm',            1,  'character',    'Output file for sample x variable matrix.'
		)
	opt <- getopt(matrix(spec, byrow = TRUE, ncol = 5))

	# Help
	is.null(opt$help) || print.help(spec)

	# Check values
	! is.null(opt$input) || arg.error('You must set an input directory through -i option.')
	file.exists(opt$input) || arg.error(paste("Directory \"", opt$input, "\" doesn't exist.", sep = ''))

	# Set default path for unset outputs
	if (is.null(opt[['sample-output']])) opt[['sample-output']] <- paste(opt$input, 'sample-metadata.tsv', sep = '-')
	if (is.null(opt[['variable-output']])) opt[['variable-output']] <- paste(opt$input, 'variable-metadata.tsv', sep = '-')
	if (is.null(opt[['matrix-output']])) opt[['matrix-output']] <- paste(opt$input, 'sample-variable-matrix.tsv', sep = '-')

	return(opt)
}

# MAIN {{{1
################################################################

options(error = function() { traceback(2) ; quit(status = 1) }, warn = 2 )

# Read command line arguments
opt <- read.args()

# Read ISA-Tab files
isa <- readISAtab(opt$input)

# Get w4m format
sample.metadata <- NULL
variable.metadata <- NULL
sample.variable.matrix <- NULL

# Get first study
study.name <- isa@study.identifiers[[1]]
if (length(study.name) != 1)
	stop("No study found.")

# Get study data frame
study.df <- isa@study.files[[study.name]]

# Get first assay of study
study.assays <- isa@assay.files.per.study[[study.name]]
if (length(study.assays) == 0)
	stop(paste("No assay in study ", study.name, ".", sep = ''))
study.assay.filename <- isa@assay.filenames[[1]]
study.assay.df <- study.assays[[1]]

# Create sample metadata by merging assay and study metadata
colnames(study.df) <- make.names(colnames(study.df), uniq = TRUE)
colnames(study.assay.df) <- make.names(colnames(study.assay.df), uniq = TRUE)
sample.metadata <- merge(study.assay.df, study.df, by = "Sample.Name", sort = FALSE)

# Get `m_` file
m_file <- study.assay.df[["Metabolite.Assignment.File"]]
m_file <- m_file[ ! duplicated(m_file)]
if (length(m_file) != 1)
	stop(paste("Zero, or More than one metabolite assignement file found in assay \"", study.assay.filename, "\": ", paste(m_file, collapse = ", "), ".", sep = ''))
m.df <- read.table(file = file.path(opt$input, m_file), sep = "\t", header = TRUE, check.names = FALSE, comment.char = "")

# Get sample names for matching with m.df columns
sample.field.names <- c('Sample.Name', 'Extract.Name')
sample.names <- NULL
for (sample.field in sample.field.names) {
	if (sample.field %in% colnames(sample.metadata) && all(! duplicated(sample.metadata[[sample.field]]))) {
		sample.names <- sample.metadata[[sample.field]]
		break
	}
}
if (is.null(sample.names))
	stop(paste("Impossible to find a column for sample names among ", paste(sample.field.names, collapse = ", "), ". Either those columns do not exist, or contain duplicates.", sep = ''))

# Extract variable metadata
variable.metadata <- m.df[ ! colnames(m.df) %in% sample.names]

# Extract matrix
sample.variable.matrix <- m.df[sample.names]

# Create variable names
variable.names <- character(nrow(m.df))
for (f in c('mass_to_charge', 'retention_time'))
	if (f %in% colnames(m.df)) {
		col.vals <- as.character(m.df[[f]])
		col.vals <- ifelse(is.na(col.vals), '', col.vals)
		variable.names <- paste(variable.names, ifelse(nchar(variable.names) > 0 & nchar(col.vals) > 0, '_', ''), col.vals, sep = '')
	}
variable.names <- make.names(variable.names, uniq = TRUE)

# Add variable names as columns
variable.metadata <- cbind(data.frame(variable.name = variable.names), variable.metadata)
sample.variable.matrix <- cbind(data.frame(variable.name = variable.names), sample.variable.matrix)

# Rename samples
sample.names <- make.names(sample.names, uniq = TRUE)
colnames(sample.variable.matrix) <- c('variable.name', sample.names)
sample.metadata <- cbind(data.frame(sample.name = sample.names), sample.metadata)

# Make sure metadata columns have unique names
colnames(sample.metadata) <- make.names(colnames(sample.metadata), uniq = TRUE)
colnames(variable.metadata) <- make.names(colnames(variable.metadata), uniq = TRUE)

# Write output
write.table(sample.metadata, file = opt[['sample-output']], sep = "\t", row.names = FALSE)
write.table(variable.metadata, file = opt[['variable-output']], sep = "\t", row.names = FALSE)
write.table(sample.variable.matrix, file = opt[['matrix-output']], sep = "\t", row.names = FALSE)
